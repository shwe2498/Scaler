Count ways to make sum of odd and even indexed elements equal by removing an array element

Given an array, arr[] of size N, the task is to find the count of array indices such that removing an element from these indices makes the sum of even-indexed and odd-indexed array elements equal.

Input 1: A=[2, 1, 6, 4] Output 1: 1 Explanation 1: Removing arr[1] from the array modifies arr[] to { 2, 6, 4 } such that, arr[0] + arr[2] = arr[1]. Therefore, the required output is 1. 
Input 2: A=[1, 1, 1] Output 2: 3 Explanation 2: Removing arr[0] from the given array modifies arr[] to { 1, 1 } such that arr[0] = arr[1]  Removing arr[1] from the given array modifies arr[] to { 1, 1 } such that arr[0] = arr[1]  Removing arr[2] from the given array modifies arr[] to { 1, 1 } such that arr[0] = arr[1]  Therefore, the required output is 3.

int solve(vector<int> &A) {
    int prefixEvenSum = 0;
    int prefixOddSum = 0;
    
    for(int i = 0; i < A.size(); ++i){
        (i % 2 == 0) ? prefixEvenSum += A[i] : prefixOddSum += A[i];
    }
    
    int suffixEvenSum = 0;
    int suffixOddSum = 0;
    int count = 0;
    
    for(int i = A.size() - 1; i >= 0; --i){
        (i % 2 == 0) ? prefixEvenSum -= A[i] : prefixOddSum -= A[i];
        
        if((prefixEvenSum + suffixEvenSum) == (prefixOddSum + suffixOddSum)) ++count;
        
        (i % 2 == 0) ? suffixOddSum += A[i] : suffixEvenSum += A[i];
    }
    
    return count;
}

//TC : O(n) SC : O(1)
