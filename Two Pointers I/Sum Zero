Sum Zero
Given an array A of N integers, are there elements a, b, c in S such that a + b + c = 0

Find all unique triplets in the array which gives the sum of zero.

Note:

Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c) The solution set must not contain duplicate triplets.
Example Input A = [-1,0,1,2,-1,4]
Example Output [ [-1,0,1], [-1,-1,2] ]
Example Explanation Out of all the possible triplets having total sum zero,only the above two triplets are unique.

void searchPair(vector<int>& A, int target, int left, vector<vector<int>>& triplets){
    int right = A.size() - 1;
    while(left < right){
        int curr_sum = A[left] + A[right];
        if(curr_sum == target){
            triplets.push_back({-target, A[left], A[right]});
            left++;
            right--;
            while(left < right && A[left] == A[left - 1]){
                left++;
            }
            while(left < right && A[right] == A[right + 1]){
                right--;
            }
        }
        else if(target > curr_sum){
            left++;
        }
        else{
            right--;
        }
    }
}

vector<vector<int> > threeSum(vector<int> &A) {
    if(A.size() < 3) return {};
    sort(A.begin(), A.end());
    vector<vector<int>> triplets;
    for(int i = 0; i < A.size() - 2; i++){
        if(i > 0 && A[i] == A[i - 1]){
            continue;
        }
        searchPair(A, -A[i], i + 1, triplets);
    }
    return triplets;
}

TC : O(N*N) -> Sort :(NlogN) searchPair O(N) O(N) SC : O(1) but for sorting O(N)
