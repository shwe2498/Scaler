Anagrams

Given an array A of N strings, return all groups of strings that are anagrams.

Represent a group by a list of integers representing the index(1-based) in the original list. Look at the sample case for clarification.

NOTE: Anagram : a word, phrase, or name formed by rearranging the letters of another, such as 'spar', formed from 'rasp'.

Input 1: A = [cat, dog, god, tca] Output 1:[ [1, 4],[2, 3] ] Explanation 1: "cat" and "tca" are anagrams which correspond to index 1 and 4 and "dog" and "god" are another set of anagrams which correspond to index 2 and 3. The indices are 1 based ( the first element has index 1 instead of index 0).
Input 2: A = [rat, tar, art] Output 2: [ [1, 2, 3] ] Explanation 2: All three strings are anagrams.

vector<vector<int> > anagrams(const vector<string> &A) {
    map<vector<int>, vector<int>> M;
    int c  = 1;
    for(auto s : A){
        vector<int> V(26,0);
        for(auto w : s){
            V[w-'a'] += 1;
        }
        M[V].push_back(c++);
    }
    vector<vector<int>> out;
    for(auto m : M){
        if(m.second.size() != 0){
            out.push_back(m.second);
        }
    }
    return out;
}
TC : O(N * k) SC : O(n)
