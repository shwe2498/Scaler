List Cycle
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Try solving it using constant additional space.

Input:    _____
         |     |
         \/    |
1 -> 2 -> 3 -> 4
Return the node corresponding to node 3.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::detectCycle(ListNode* A) {
    if(!A || !A->next) return A;
    ListNode* slow = A;
    ListNode* fast = A;
    bool isCycle = false;
    while(slow && fast && fast->next){
        slow = slow->next;
        fast = fast->next->next;
        if(slow == fast){
            isCycle = true;
            break;
        }
    }

    ListNode* node1 = nullptr;
    if (isCycle){
        node1 = A;
        ListNode* node2 = slow;
        while (node1 != node2){
            node1 = node1->next;
            node2 = node2->next;
        }
    }
    return node1;
}
