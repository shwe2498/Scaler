Remove Loop from Linked List
You are given a linked list that contains a loop.
You need to find the node, which creates a loop and break it by making the node point to NULL.

Input 1:
1 -> 2
^    |
| - - 
Output 1: 1 -> 2 -> NULL
Explanation 1: Chain of 1->2 is broken.

Input 2:
3 -> 2 -> 4 -> 5 -> 6
          ^         |
          |         |    
          - - - - - -
Output 2: 3 -> 2 -> 4 -> 5 -> 6 -> NULL
Explanation 2: Chain of 4->6 is broken.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::solve(ListNode* A) {
    ListNode* slow = A;
    ListNode* fast = A;

    while(slow && fast && fast->next){
        slow = slow->next;
        fast = fast->next->next;
        if(slow == fast)
            break;
    }

    if(slow == fast){
        slow = A;

        if(slow == fast){
            while(fast->next != slow) fast = fast->next;
        }
        else{
            while(slow->next != fast->next){
                slow = slow->next;
                fast = fast->next;
            }
        }

        fast->next = nullptr;
    }
    return A;
}
