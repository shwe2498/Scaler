Delete middle node of a Linked List
Given a singly linked list, delete middle of the linked list.

For example, if given linked list is 1->2->3->4->5 then linked list should be modified to 1->2->4->5

If there are even nodes, then there would be two middle nodes, we need to delete the second middle element.

For example, if given linked list is 1->2->3->4->5->6 then it should be modified to 1->2->3->5->6.

Return the head of the linked list after removing the middle node.

If the input linked list has 1 node, then this node should be deleted and a null node should be returned.

nt getSize(ListNode* A){
    auto temp = A;
    int count = 0;
    while(temp){
        count++;
        temp = temp->next;
    }
    return count;
}

void deleteNode(ListNode* A){
    if(A){
        delete A;
        A = nullptr;
    }
}

ListNode* solve(ListNode* A) {
    int size = getSize(A);
    if(size == 0 || size == 1) return nullptr;
    int mid = (size / 2);
    auto curr = A;
    for(int i = 1; i < mid; i++){
        if(curr && curr->next){
            curr = curr->next;
        }
    }
    auto tobeDeleted = curr->next;
    curr->next = curr->next->next;
    deleteNode(tobeDeleted);
    return A;
}
