Reverse Linked List
You are given a singly linked list having head node A. You have to reverse the linked list and return the head node of that reversed list.

NOTE: You have to do it in-place and in one-pass.

Input 1: A = 1 -> 2 -> 3 -> 4 -> 5 -> NULL  Output 1: 5 -> 4 -> 3 -> 2 -> 1 -> NULL 
Input 2: A = 3 -> NULL Output 2: 3 -> NULL 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* reverseList(ListNode* A) {
    ListNode* temp = nullptr;
    ListNode* revHead = nullptr;

    while(A){
        temp = A;
        A = A->next;
        temp->next = revHead;
        revHead = temp;
    }
    return revHead;
}
