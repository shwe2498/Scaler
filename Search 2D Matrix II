Search in a row wise and column wise sorted matrix
Given a matrix of integers A of size N =*M and an integer B.
In the given matrix every row and column is sorted in increasing order. Find and return the position of B in the matrix in the given form:
If A[i][j] = B then return (i*1009 + j)
If B is not present return -1.

Note 1: Rows are numbered from top to bottom and columns are numbered from left to right.
Note 2: If there are multiple B in A then return the smallest value of i*1009+j such that A[i][j]=B.

Example 
Input: A = [[1,2,3],[4,5,6],[7,8,9]] B = 2
Output: 1011  A[1][2] = 2 1*1009+2 = 1011

int searchMatrix(vector<vector<int>> &A, int B){
	int res = -1;
	int minVal = INT_MAX;

	int i = 0;
  int j = A[0].size() - 1;
  int k = A.size() ;

  while(i < k && j >= 0){
    if(A[i][j] == B){
      int curr_val = ((i+1) * 1009) + (j+1);
      if(curr_val <  minVal){
        minVal = curr_val;
        res = min_val;
      }
      j--;
    }
    else if(A[i][j] > B){
      j--;
    }
    else if(A[i][j] < B){
      i++;
    }
  }
  return res;
}
