/* Permutations of A in B

You are given two strings A and B of size N and M respectively.

You have to find the count of all permutations of A present in B as a substring. You can assume a string will have only lowercase letters.
Input 1: A = "abc" B = "abcbacabc" Output 1: 5 Explanation 1: Permutations of A that are present in B as substring are:
    1. abc
    2. cba
    3. bac
    4. cab
    5. abc
    So ans is 5.
    
Input 2: A = "aca" B = "acaa" Output 2: 2 Explanation 2: Permutations of A that are present in B as substring are:
    1. aca
    2. caa */
    
    
int solve(string A, string B) {
    int count = 0;
    vector<int> v1(26,0);
    vector<int> v2(26,0);
    
    for(auto a : A){
        v1[a-'a']++;
    }
    int start = 0;
    int end = 0;
    while(end < B.size()){
        v2[B[end] - 'a']++;
        
        if(v1 == v2){
            count++;
        }
        
        if(end - start + 1 == A.size()){
            v2[B[start] - 'a']--;
            start++;
        }
        
        end++;
    }
    return count;
}
// TC : O(n) SC : O(1)
