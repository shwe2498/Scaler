Level Order
Given a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Input 1:
    3
   / \
  9  20
    /  \
   15   7
Output 1:
 [
   [3],
   [9, 20],
   [15, 7]
 ]

Input 2:
   1
  / \
 6   2
    /
   3
Output 2:
 [ 
   [1]
   [6, 2]
   [3]
 ]
Explanation 1: Return the 2D array. Each row denotes the traversal of each level.
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<vector<int> > levelOrder(TreeNode* A) {
    vector<vector<int>> out;

    queue<TreeNode*> q;
    q.push(A);

    while(!q.empty()){
        int n = q.size();
        vector<int> o;
        for(int i = 0; i < n; i++){
            TreeNode* t = q.front();
            q.pop();

            o.push_back(t->val);
            
            if(t->left)
                q.push(t->left);
            if(t->right)
                q.push(t->right);
        }
        out.push_back(o);
    }
    return out;
}
