/* Sorted Insert Position
Given a sorted array A of size N and a target value B, return the index (0-based indexing) if the target is found.
If not, return the index where it would be if it were inserted in order.

NOTE: You may assume no duplicates in the array. Users are expected to solve this in O(log(N)) time.

Input 1: A = [1, 3, 5, 6] B = 5 Output 1: 2 Explanation 1: The target value is present at index 2.
Input 2: A = [1] B = 1 Output 2: 0 Explanation 2: The target value is present at index 0. */

int searchInsert(vector<int> &A, int B) {
    int start = 0;
    int end = A.size() - 1;
    while(start <= end){
        int mid = (start + end) / 2;
        if(A[mid] == B) return mid;
        else if(A[mid] < B) start = mid + 1;
        else end = mid - 1;
    }
    return start;
}
