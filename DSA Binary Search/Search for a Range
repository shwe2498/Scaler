/* Search for a Range
Given a sorted array of integers A(0 based index) of size N, find the starting and ending position of a given integar B in array A.
Your algorithm's runtime complexity must be in the order of O(log n).
Return an array of size 2, such that first element = starting position of B in A and second element = ending position of B in A, if B is not found in A return [-1, -1].

Input 1: A = [5, 7, 7, 8, 8, 10] B = 8 Output 1: [3, 4] Explanation 1: First occurence of 8 in A is at index 3 Second occurence of 8 in A is at index 4 ans = [3, 4]
Input 2: A = [5, 17, 100, 111] B = 3 Output 2: [-1, -1] Explanation 2: There is no occurence of 3 in the array. */

int lower_bound(const vector<int> &A, int B){
    int start = 0;
    int end = A.size() - 1;
    int out = -1;
    while(start <= end){
        int mid = (start + end) / 2;
        if(A[mid] == B){
            out = mid;
            end = mid - 1;
        }
        else if(A[mid] < B){
            start = mid + 1;
        }
        else{
            end = mid - 1;
        }
    }
    return out;
}

int upper_bound(const vector<int> &A, int B){
    int start = 0;
    int end = A.size() - 1;
    int out = -1;
    while(start <= end){
        int mid = (start + end) / 2;
        if(A[mid] == B){
            out = mid;
            start = mid + 1;
        }
        else if(A[mid] < B){
            start = mid + 1;
        }
        else{
            end = mid - 1;
        }
    }
    return out;
}

vector<int> searchRange(const vector<int> &A, int B) {
    return {lower_bound(A, B), upper_bound(A, B)};
}
