First Missing Integer

Given an unsorted integer array A of size N. Find the first missing positive integer.

Note: Your algorithm should run in O(n) time and use constant space.

Input 1: [1, 2, 0] Output 1: 3 Explanation 1: A = [1, 2, 0] First positive integer missing from the array is 3.
Input 2: 3, 4, -1, 1] Output 2: 2
Input 3: [-8, -7, -6] Output 3: 1

int firstMissingPositive(vector<int> &A) {
    for(int i = 0; i < A.size(); i++){
        if(A[i] > 0 && A[i] < A.size() && A[A[i] - 1] != A[i]){
            swap(A[A[i] - 1], A[i]);
            i--;
        }
    }
    
    for(int i = 0; i < A.size(); i++){
        if(A[i] != i + 1) return i + 1;
    }
    return A.size() + 1;
}
TC :O(n) SC :O(1)
