Copy List
A linked list A is given such that each node contains an additional random pointer which could point to any node in the list or NULL.
Return a deep copy of the list.

Example Input Given list 1 -> 2 -> 3
with random pointers going from
  1 -> 3
  2 -> 1
  3 -> 1
  
Example Output 1 -> 2 -> 3
with random pointers going from
  1 -> 3
  2 -> 1
  3 -> 1
  
Example Explanation
You should return a deep copy of the list. The returned answer should not contain the same node as the original list, but a copy of them. The pointers in the returned list should not link to any node in the original input list.

/**
 * Definition for singly-linked list.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
RandomListNode* Solution::copyRandomList(RandomListNode* A) {
    RandomListNode* curr = A;
    RandomListNode* temp;

    while(curr){
        temp = curr->next;
        curr->next = new RandomListNode(curr->label);
        curr->next->next = temp;
        curr = temp;
    }

    curr = A;
    while(curr){
        curr->next->random = curr->random ? curr->random->next : curr->random;
        curr = curr->next->next;
    }

    RandomListNode* original = A;
    RandomListNode* copy = A->next;
    temp = copy;

    while(original && copy){
        original->next = original->next->next;
        copy->next = copy->next ? copy->next->next : copy->next;

        original = original->next;
        copy = copy->next;
    }
    return temp;
}
