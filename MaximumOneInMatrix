Row with maximum number of ones
Given a binary sorted matrix A size N*N. Find the row with the maximum number of 1.
If two rows have the maximum number of 1 then return the row which has the lower index.
Rows are numbered from top to bottom and columns are numbered from left to right.
Assume 0-based indexing.
Assume each row to be sorted by values.
Expected time complexity is O(rows).

Input: 
A = [[0,1,1,]]
       [0,0,1],
       [0,1,1]]
Output : 0

A = [[0,0,0,0],
       [0,1,1,1]]
Output: 1

int maximumOnesInRow(vector<vector<int>> &A){
	int i = 0;
	int j = A[0].size() - 1;
	int min_row_index  = -1;

	while(i < A.size() && j >= 0){
		if(A[i][j] == 1){
			j--;
			min_row_index = i;
    }
    else if(A[i][j] == 0){
      i++;
    }
  }
  return min_row_index;
}
O(N*N)
