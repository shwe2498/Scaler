Count Rectangles
Given two arrays of integers A and B of size N each, where each pair (A[i], B[i]) for 0 <= i < N represents a unique point (x, y) in 2-D Cartesian plane.

Find and return the number of unordered quadruplet (i, j, k, l) such that (A[i], B[i]), (A[j], B[j]), (A[k], B[k]) and (A[l], B[l]) form a rectangle with the rectangle having all the sides parallel to either x-axis or y-axis.
Input 1: A = [1, 1, 2, 2] B = [1, 2, 1, 2] Output 1: 1 Explanation 1: All four given points make a rectangle. So, the answer is 1.

Input 1:  = [1, 1, 2, 2, 3, 3] B = [1, 2, 1, 2, 1, 2] Output 2: 3 Explanation 2: 3 quadruplets which make a rectangle are: (1, 1), (2, 1), (2, 2), (1, 2)
                                           (1, 1), (3, 1), (3, 2), (1, 2)
                                           (2, 1), (3, 1), (3, 2), (2, 2)
                                           
int solve(vector<int> &A, vector<int> &B) {
    set<pair<int, int>> S;
    for(int i = 0; i < A.size(); i++){
        S.insert(make_pair(A[i], B[i]));
    }

    int count = 0;
    for(int i = 0; i < A.size(); i++){
        int x1 = A[i];
        int y1 = B[i];
        for(int j = i + 1; j < B.size(); j++){
            int x2 = A[j];
            int y2 = B[j];
            if((x1 != x2 && y2 != y1) && 
                S.find(make_pair(x1, y2)) != S.end() &&
                S.find(make_pair(x2, y1)) != S.end()){
                    count++;
                }
        }
    }
    return count / 2;
}

TC :O(N*N) SC : O(N)
