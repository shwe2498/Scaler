Cyclic Permutation
Given two binary strings A and B, count how many cyclic permutations of B when taken XOR with A give 0.

NOTE: If there is a string, S0, S1, ... Sn-1 , then it's cyclic permutation is of the form Sk, Sk+1, ... Sn-1, S0, S1, ... Sk-1 where k can be any integer from 0 to N-1.
Input 1: A = "1001" B = "0011" Output 1: 1
Explanation 1: 4 cyclic permutations of B exists: "0011", "0110", "1100", "1001". There is only one cyclic permutation of B i.e. "1001" which has 0 xor with A.

Input 2: A = "111" B = "111" Output 2: 3
Explanation 2: All cyclic permutations of B are same as A and give 0 when taken xor with A. So, the ans is 3.


vector<int> buildLPS(string pattern){
    int pattern_size = pattern.size();
    vector<int> lps(pattern_size, 0);
    int forward_index = 1;
    int backward_index = 0;
    while(forward_index < pattern_size){
        if(pattern[forward_index] == pattern[backward_index]){
            lps[forward_index++] = ++backward_index;
        }
        else{
            if(backward_index != 0){
                backward_index = lps[backward_index - 1];
            }
            else{
                lps[forward_index++] = 0;
            }
        }
    }

    return lps;
}

int solve(string A, string B) {
    string text = A + "$" + B + B.substr(0, B.size() - 1); // Pattern&TextText-1
    int count = 0;
    auto lps = buildLPS(text);
    for(auto a : lps){
        if(a == A.size()){
            count++;
        }
    }
    return count;
}
