/* Optimal Partitioning

You are given an array A having N integers.

You have to divide / split the array into 2 subsequence partitions such that:

Both the partitions are non-empty.
Each integer A[i] in the array belongs to exactly one of the two partitions.
Absolute difference between the maximum of first partition and the minimum of second partition is minimum possible.
If B and C represent the two partitions, then size(B) >= 1, size(C) >= 1 and |max(B) - min(C)| is minimum possible. You have to find such a spliting and tell the minimum value of |max(B) - max(C)|.

Input 1: A = [3, 1, 2, 6, 4] Output 1: 1 Explanation 1: B = [1, 2, 4] C = [3, 6] max(B) = 4, min(C) = 3 abs(max(B) - min(C)) = abs(4 - 3) = abs(1) = 1 
Input 2: A = [2, 1, 3, 2, 4, 3] Output 2: 0 Explanation 2: B = [2, 1] C = [3, 2, 4, 3] max(B) = 2, min(C) = 2 abs(max(B) - min(C)) = abs(2 - 2) = abs(0) = 0 */


int solve(vector<int> &A) {
    sort(A.begin(), A.end());
    
    int ans = INT_MAX;
    
    for(int a = 0; a < A.size() - 1; a++){
            ans = min(ans, abs(A[a] - A[a+1]));
    }
    return ans;
}

//TC : O(nlogn) SC : O(1) 
