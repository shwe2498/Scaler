/* Subarray with given sum
Given an array of positive integers A and an integer B, find and return first continuous subarray which adds to B.

If the answer does not exist return an array with a single element "-1".

First sub-array means the sub-array for which starting index in minimum.

Input: A = [1, 2, 3, 4, 5] B = 5 Output: [2,3]
*/

vector<int> Solution::solve(vector<int> &A, int B) {
    vector<int> v;
    int curr_sum = A[0], start = 0, i; 
 
    for (i = 1; i <= A.size(); i++) 
    { 
        while (curr_sum > B && start < i - 1) 
        { 
            curr_sum -= A[start]; 
            start++; 
        } 
 
        if (curr_sum == B) 
        { 
            for(int j = start; j < i; j++)
            {
                v.push_back(A[j]);
            }
            return v; 
        } 

        if (i < A.size()) 
          curr_sum += A[i]; 
    } 
    return {-1};
}
//TC : O(n) SC : O(1)
