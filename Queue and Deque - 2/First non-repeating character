First non-repeating character
Given a string A denoting a stream of lowercase alphabets, you have to make a new string B.
B is formed such that we have to find the first non-repeating character each time a character is inserted to the stream and append it at the end to B. If no non-repeating character is found, append '#' at the end of B.
Input 1: A = "abadbc" Output 1: "aabbdd" 
Explanation 1:
"a"      -   first non repeating character 'a'
"ab"     -   first non repeating character 'a'
"aba"    -   first non repeating character 'b'
"abad"   -   first non repeating character 'b'
"abadb"  -   first non repeating character 'd'
"abadbc" -   first non repeating character 'd'

Input 2: A = "abcabc" Output 2: "aaabc#"
Explanation 2:
"a"      -   first non repeating character 'a'
"ab"     -   first non repeating character 'a'
"abc"    -   first non repeating character 'a'
"abca"   -   first non repeating character 'b'
"abcab"  -   first non repeating character 'c'
"abcabc" -   no non repeating character so '#'

 string solve(string A) {
    string out;
    unordered_map<char, int> M;
    deque<char> D;

    for(auto c : A){
        M[c]++;
        D.push_back(c);
        while(!D.empty() && M[D.front()] > 1){
            D.pop_front();
        }
        if(!D.empty()){
            out += D.front();
        }
        else{
            out += '#';
        }
    }
    return out;
}

TC : O( N) SC : O(1)
