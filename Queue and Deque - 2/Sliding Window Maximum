Sliding Window Maximum
Given an array of integers A. There is a sliding window of size B, moving from the very left of the array to the very right. You can only see the B numbers in the window. Each time the sliding window moves rightwards by one position. You have to find the maximum for each window.

Return an array C, where C[i] is the maximum value in the array from A[i] to A[i+B-1].

Refer to the given example for clarity.

NOTE: If B > length of the array, return 1 element with the max of the array.
Input 1: A = [1, 3, -1, -3, 5, 3, 6, 7] B = 3 Output 1: [3, 3, 5, 5, 6, 7]
Explanation 1: 
Window position     | Max
 --------------------|-------
 [1 3 -1] -3 5 3 6 7 | 3
 1 [3 -1 -3] 5 3 6 7 | 3
 1 3 [-1 -3 5] 3 6 7 | 5
 1 3 -1 [-3 5 3] 6 7 | 5
 1 3 -1 -3 [5 3 6] 7 | 6
 1 3 -1 -3 5 [3 6 7] | 7

Input 2: A = [1, 2, 3, 4, 2, 7, 1, 3, 6] B = 6 Output 2: [7, 7, 7, 7]
Explanation 2:
Window position     | Max
 --------------------|-------
 [1 2 3 4 2 7] 1 3 6 | 7
 1 [2 3 4 2 7 1] 3 6 | 7
 1 2 [3 4 2 7 1 3] 6 | 7
 1 2 3 [4 2 7 1 3 6] | 7
 
 vector<int> slidingMaximum(const vector<int> &A, int B) {
    if(A.size() == 1) return {A[0]};
    vector<int> out;
    deque<int> CL;

    int start = 0;
    int end = 0;
    while(end < A.size()){
        while(!CL.empty() && CL.back() < A[end]){
            CL.pop_back();
        }
        CL.push_back(A[end]);

        if(end - start + 1 == B){
            out.push_back(CL.front());
            
            if(CL.front() == A[start]){
                CL.pop_front();
            }
            
            start++;
        }

        end++;
    }
    return out;
}
TC : O(N) SC :O(B)
